{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","xaxis","yaxis","agrid","amaxdisplay","adisplay","handleChange","bind","assertThisInitialized","handleYChange","handleSubmit","singleChange","paintIt","xNumber","yNumber","grid","i","line","j","value","Math","floor","random","push","setState","setDisplayFindRegions","e","arr","x","target","id","y","currentTarget","name","display","maxDisplay","visualButtons","react","type","className","onClick","lists","checkTheLists","length","includes","digit","listnumber","list","v","b","yyy","xxx","idd","_lists$surnumber","surlistnumber","surnumber","parseInt","number","apply","toConsumableArray","max","forEach","event","preventDefault","href","onSubmit","onChange","React","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78ba7724.chunk.js","sourcesContent":["import * as React from \"react\"\nimport './App.css';\n\ninterface IState {\n  xaxis?: any;\n  yaxis?: any;\n  agrid?: any;\n  amaxdisplay?: any;\n  adisplay?: any;\n  listnumber?: string\n}\ninterface IProps { }\n\nclass App extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props)\n    this.state = {\n      xaxis: 10,\n      yaxis: 5,\n      agrid: [],\n      amaxdisplay: [],\n      adisplay: [],\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleYChange = this.handleYChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.singleChange = this.singleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.paintIt()\n  }\n\n  paintIt() {\n    //1. set the number\n    var xNumber = this.state.xaxis\n    var yNumber = this.state.yaxis\n    var grid = []\n\n    for (var i = 0; i < yNumber; i++) {\n      var line = []\n      for (var j = 0; j < xNumber; j++) {\n        var value = (Math.floor((Math.random() * 2) % 2)) ? \"1\" : \"0\"\n        line.push(value)\n      }\n      grid.push(line)\n    }\n    this.setState({ agrid: grid });\n\n    //2. find the regions and set the display\n    this.setDisplayFindRegions(grid)\n  }\n\n  singleChange(e: any) {\n    var arr = this.state.agrid\n    var x = e.target.id;\n    var y = e.currentTarget.name;\n\n    //toggle\n    if (arr[y][x] === '1') {\n      arr[y][x] = \"0\";\n    } else {\n      arr[y][x] = \"1\";\n    }\n    this.setDisplayFindRegions(arr)\n  }\n\n\n  setDisplayFindRegions(arr: any) {\n    var xNumber = this.state.xaxis\n    var yNumber = this.state.yaxis\n    var display = []\n    var maxDisplay = []\n\n    //a. display the visuals\n    for (var i = 0; i < yNumber; i++) {\n      var visualButtons: any[] = [];\n      for (var j = 0; j < xNumber; j++) {\n        var value = arr[i][j]\n        if (value === \"1\")\n          visualButtons.push(<button type=\"button\" className=\"btn btn-danger\" name={'' + i} id={'' + j} onClick={this.singleChange}>{value}</button>)\n        else\n          visualButtons.push(<button type=\"button\" className=\"btn btn-light\" name={'' + i} id={'' + j} onClick={this.singleChange}>{value}</button>)\n      }\n      display.push(<br></br>)\n      display.push(visualButtons)\n    }\n\n    //b. find regions\n    var lists: any[] = [];\n    function checkTheLists(id: string) {\n      for (var i = 0; i < lists.length; i++) {\n        if (lists[i].includes(id)) {\n          // return the list index\n          return '' + i\n        }\n      }\n      return 'non'\n    }\n\n    for (var i = 0; i < yNumber; i++) {\n      for (var j = 0; j < xNumber; j++) {\n        var digit = arr[i][j]\n        var id = \"\" + i + \"_\" + j\n        var listnumber = checkTheLists(id)\n        //for each button\n        if (digit === \"1\") {\n          //1. if the button is a one, check the entire lists\n          if (listnumber === 'non') {\n            //not in the entire lists, adding it\n            var list = []\n            list.push(id)\n            lists.push(list)\n            //console.log('added it to list number ' + listnumber)\n          } else {\n            //console.log('already in the lists ' + listnumber + ', skip...')\n          }\n\n          //2. checking surrounding\n          for (var v = -1; v < 2; v++) {\n            for (var b = -1; b < 2; b++) {\n\n              //make sure both bias are not zero\n              if (v === b && v === 0) { } else {\n\n                // make sure the coordinates is not negative, for top and left boundaries\n                if (i + v >= 0 && j + b >= 0) {\n                  //make sure the coordinates does not exeed the limit, for bottom and right boundaries \n                  if (i + v < yNumber && j + b < xNumber) {\n\n                    var yyy = i + v\n                    var xxx = j + b\n                    //console.log(\"__checking surround buttons: arr[\" + yyy + '][' + xxx + ']')\n                    var idd = yyy + '_' + xxx\n                    var smallDigit = arr[yyy][xxx]\n\n                    // surrounding button is a one\n                    if (smallDigit === \"1\") {\n                      listnumber = checkTheLists(id)\n                      var surlistnumber = checkTheLists(idd)\n                      var surnumber = parseInt(surlistnumber)\n                      //console.log('___is one! check is in list ' + surlistnumber)\n                      //console.log('___will put it in the list ' + listnumber)\n\n                      var number = parseInt(listnumber)\n                      //check the list and do the processing\n                      if (surlistnumber === 'non') {\n                        lists[number].push(idd)\n                        //console.log(' _has put it to list number ' + listnumber)\n                      } else {\n                        if (listnumber !== surlistnumber) {\n                          lists[surnumber].push(...lists[number])\n                          lists[number] = []\n                          //console.log('_has merge list ' + listnumber + 'to list ' + surlistnumber)\n                        }\n\n                      }\n                    }\n\n                  }\n                }\n\n              }\n            }\n          }\n        }\n      }\n    }\n\n    display.push(<br></br>);\n    // display.push('lists: '  + JSON.stringify(lists));\n    this.setState({ adisplay: display });\n\n\n    //finding the largest region\n    var max = 0\n    lists.forEach(function (e) {\n      if (e.length > max)\n        max = e.length\n    });\n    maxDisplay.push('The largest region is ' + max);\n    this.setState({ amaxdisplay: maxDisplay });\n  }\n\n  handleChange(event: any) {\n    this.setState({ xaxis: event.target.value });\n  }\n  handleYChange(event: any) {\n    this.setState({ yaxis: event.target.value });\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n    this.paintIt()\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <a href=\"https://github.com/8gb/connected-cells\" target=\"_blank\">github</a>\n        <br></br>\n        <form className=\"Appo\" onSubmit={this.handleSubmit}>\n\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-6\">\n              <label>x axis:</label>\n              <input className=\"form-control\" type=\"text\" value={this.state.xaxis} onChange={this.handleChange} />\n            </div>\n            <div className=\"form-group col-md-6\">\n              <label>y axis:</label>\n              <input className=\"form-control\" type=\"text\" value={this.state.yaxis} onChange={this.handleYChange} />\n            </div>\n          </div>\n\n          <input className=\"btn btn-primary\" type=\"submit\" value=\"Refresh\" />\n        </form>\n        <hr></hr>\n        <div>\n          <h3>{this.state.amaxdisplay}</h3>\n          {this.state.adisplay}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}